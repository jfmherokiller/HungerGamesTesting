{"version":3,"sources":["InnerGameMechanics.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InnerGameMechanics","PlayerList","Day","Object","classCallCheck","this","ActionsTaken","PlayButton","props","possibleConstructorReturn","getPrototypeOf","call","_this","react_default","a","createElement","className","onClick","PlayerCallback","React","Component","Player","_ref","Imageurl","Name","Health","MaxHealth","Fullness","KinkyNess","Allies","Aggressiveness","Statuses","MaxFullness","Tools","Card_default","style","width","Img","variant","src","concat","Body","Title","ListGroup_default","Item","ProgressBar_default","now","max","label","GenerateList","ListName","Data","Text","join","Game","_this2","Playerlist","state","TextboxInfo","renderPlayerBits","App_PlayButton","AdvanceDay","bind","value","output","map","renderPlayer","PlayerAdder","App_AddPlayer","AcceptNewPlayer","final","push","PlayerObject","oldList","setState","RunRound","ImageUrl","App_Player","AddPlayer","_this3","PlayerImage","PlayerName","handleInputChange","assertThisInitialized","event","target","name","defineProperty","_this4","Url","onChange","ButtonOnClick","NewPlayer","App","App_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13aba3ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass InnerGameMechanics {\r\n    private PlayerList:Playerlisttype;\r\n    private Day:number;\r\n    private ActionsTaken:Array<string>;\r\n    constructor(PlayerList: Playerlisttype, Day: number) {\r\n        this.PlayerList = PlayerList;\r\n        this.Day = Day;\r\n        this.ActionsTaken=[];\r\n    }\r\n\r\n    Exploration() {\r\n\r\n    }\r\n    AttackOrEncounter() {\r\n\r\n    }\r\n    Stealth() {\r\n\r\n    }\r\n    Forage() {\r\n\r\n    }\r\n    SanityCheck() {\r\n\r\n    }\r\n    Raid() {\r\n\r\n    }\r\n    Vore() {\r\n\r\n    }\r\n    DirectAttack() {\r\n\r\n    }\r\n\r\n    RunRound() {\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default InnerGameMechanics;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport InnerGameMechanics from \"./InnerGameMechanics\"\nclass PlayButton extends React.Component<{ PlayerCallback: Function },{}> {\n    constructor(props: Readonly<{ PlayerCallback: Function; }>) {\n        super(props);\n    }\n    render() {\n        return (\n            <button className=\"PlayRound\" onClick={() => this.props.PlayerCallback()}> Play Round</button>\n        );\n    }\n}\n\nclass OutputFeild extends React.Component {\n    render() {\n        return (\n            <textarea className=\"OutputFeild\"/>\n        );\n    }\n}\n\n\nclass Player extends React.Component {\n    render() {\n\n        const {Imageurl, Name, Health, MaxHealth, Fullness, KinkyNess, Aggressiveness, Allies, Statuses, MaxFullness,Tools} = this.props as any;\n        return (\n            <Card style={{width: '18rem'}}>\n                <Card.Img variant=\"top\" src={`${Imageurl}%`}/>\n                <Card.Body>\n                    <Card.Title>{Name}</Card.Title>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>Health:<ProgressBar now={Health} max={MaxHealth}\n                                                            label={`${Health}%`}/></ListGroup.Item>\n                        <ListGroup.Item>Fullness:<ProgressBar now={Fullness} max={MaxFullness} label={`${Fullness}%`}/></ListGroup.Item>\n                        <ListGroup.Item>Kinkyness: {KinkyNess}</ListGroup.Item>\n                        <ListGroup.Item>{Player.GenerateList(\"Allies\", Allies)}</ListGroup.Item>\n                        <ListGroup.Item>{Player.GenerateList(\"Statuses\", Statuses)}</ListGroup.Item>\n                        <ListGroup.Item>{Player.GenerateList(\"Tools\", Tools)}</ListGroup.Item>\n                    </ListGroup>\n                </Card.Body>\n            </Card>\n        );\n    }\n\n    static GenerateList(ListName: string, Data: Array<string>) {\n        return <Card.Text>{ListName}: {Data.join(\", \")}</Card.Text>\n    }\n}\n\n\n\nclass Game extends React.Component<{}, { PlayerList: Playerlisttype, Day:number,TextboxInfo:string}> {\n    public Playerlist: Playerlisttype = [{\n        Imageurl: \"https://i.imgur.com/Tc3nzoW.png\",\n        Name: \"ASS\",\n        Health: 100,\n        MaxHealth: 100,\n        Fullness: 100,\n        MaxFullness: 100,\n        KinkyNess: 100,\n        Aggressiveness: 100,\n        Allies: [\"John\", \"Michel\", \"Smith\"],\n        Statuses: [\"Pooltoy\"],\n        Tools:[\"aaa\"]\n    }];\n\n    constructor(props: any) {\n        super(props);\n        this.state = {PlayerList: [],Day:-1,TextboxInfo:\"\"};\n    }\n\n    render() {\n        return ([<label>Day:{this.state.Day}</label>,this.renderPlayerBits(),                <PlayButton PlayerCallback={this.AdvanceDay.bind(this)}/>,\n            <textarea className=\"OutputFeild\" value={this.state.TextboxInfo}/>])\n\n    }\n\n    static renderPlayer(ImageUrl: string, Name: string, Health: number, Fullness: number, KinkyNess: number, Aggressiveness: number, Allies: any, Statuses: any, Tools:any) {\n        // @ts-ignore\n        return <div className=\"Myrow\"><Player Imageurl={ImageUrl} Name={Name} Health={Health} Fullness={Fullness} KinkyNess={KinkyNess}\n                                            Aggressiveness={Aggressiveness} Allies={Allies} Statuses={Statuses} Tools={Tools}/></div>;\n    }\n\n    renderPlayerBits() {\n        let output: any[] = this.state.PlayerList.map((value: PlayerType) => {\n            return Game.renderPlayer(value.Imageurl, value.Name, value.Health, value.Fullness, value.KinkyNess, value.Aggressiveness, value.Allies, value.Statuses, value.Tools);\n        });\n        let PlayerAdder = <AddPlayer PlayerCallback={this.AcceptNewPlayer.bind(this)}/>;\n\n        let final = [<div className=\"Myrows\">{output}</div>];\n        if(this.state.Day === -1) {\n            final.push(PlayerAdder)\n        }\n        return final;\n    }\n\n    AcceptNewPlayer(PlayerObject: PlayerType) {\n        let oldList: Playerlisttype = this.state.PlayerList;\n        oldList.push(PlayerObject);\n        this.setState({PlayerList: oldList})\n    }\n    AdvanceDay() {\n        this.setState({Day: this.state.Day +1});\n        let AdvancedMechanic = new InnerGameMechanics(this.state.PlayerList,this.state.Day);\n        let Output = AdvancedMechanic.RunRound();\n    }\n}\n\nclass AddPlayer extends React.Component<{ PlayerCallback: Function }, { PlayerImage: string, PlayerName: string }> {\n\n\n    constructor(props: Readonly<{ PlayerCallback: Function; }>) {\n        super(props);\n        this.state = {PlayerImage: '', PlayerName: ''};\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    handleInputChange(event: { target: any; }) {\n        const target = event.target;\n        const value: string = target.value;\n        const name: string = target.className;\n        if (name === \"PlayerImage\") {\n            this.setState({\n                [\"PlayerImage\"]: value\n            });\n        } else if (name === \"PlayerName\") {\n            this.setState({\n                [\"PlayerName\"]: value\n            });\n        }\n\n    }\n\n    render() {\n\n        return (\n            <div className=\"PlayerData\">\n                <label>Image Url</label><textarea className=\"PlayerImage\" value={\n                // @ts-ignore\n                this.state.Url\n            } onChange={this.handleInputChange}/>\n                <br/>\n                <label>Name:</label><textarea className=\"PlayerName\" value={\n                // @ts-ignore\n                this.state.Name\n            } onChange={this.handleInputChange}/>\n                <br/>\n                <button onClick={() => this.ButtonOnClick()}>Add Player</button>\n            </div>\n        );\n    }\n\n    ButtonOnClick() {\n        // @ts-ignore\n        let NewPlayer: PlayerType = {\n            Imageurl: this.state.PlayerImage,\n            Name: this.state.PlayerName,\n            Health: 100,\n            MaxHealth: 100,\n            Fullness: 0,\n            MaxFullness: 100,\n            KinkyNess: 0,\n            Aggressiveness: 0,\n            Allies: [],\n            Statuses: [],\n            Tools:[]\n        };\n        this.props.PlayerCallback(NewPlayer);\n    }\n}\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n\n                <Game/>\n\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}